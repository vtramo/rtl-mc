#pragma once

#include <pairwise_reduce.h>

#include "ppl_utils.h"

/*!
 *  \brief Generates the closed convex polyhedron defined by the origin and all the rays of a convex polyhedron \f$P\f$.
 *
 * Given a convex polyhedron \f$P\f$, this function constructs the closed convex polyhedron generated by the origin \f$\textbf{0}\f$ and all the rays of \f$P\f$.
 * The polyhedron \f$P\f$ is referred to as the `characteristicCone`.
 *
 * \param poly The input convex polyhedron \f$P\f$.
 * \return A `PolyUniquePtr` representing the closed convex polyhedron generated by the origin and the rays of \f$P\f$.
 */
inline PolyUniquePtr characteristicCone(const Poly& poly)
{
    const PPL::Generator_System& generatorSystem { poly.generators() };

    PPL::Generator_System cone {};
    for (const PPL::Generator& generator: generatorSystem)
        if (generator.is_ray())
            cone.insert(generator);

    PPL::Generator origin { PPL::point(PPLUtils::zeroPointLinearExpression(poly.space_dimension())) };
    cone.insert(origin);

    return std::make_unique<Poly>(cone);
}

/*!
 *  \brief Constructs the cone of a convex polyhedron \f$P\f$.
 * \param poly The input convex polyhedron \f$P\f$ used to generate the cone.
 * \return A `PowersetUniquePtr` representing the cone of the convex polyhedron \f$P\f$.
 * \see coneGenerator
 */
inline PowersetUniquePtr coneGeometric(const Poly& poly)
{
    Poly positiveTimeElapsePoly { poly };
    positiveTimeElapsePoly.positive_time_elapse_assign(poly);
    Powerset positiveTimeElapsePowerset { positiveTimeElapsePoly };
    positiveTimeElapsePowerset.difference_assign(Powerset { poly });

    Poly origin { PPLUtils::zeroPoint(poly.space_dimension()) };
    Poly unboundedCone { origin };
    unboundedCone.positive_time_elapse_assign(poly);

    PowersetUniquePtr cone { PPLUtils::minus(Powerset { unboundedCone }, positiveTimeElapsePowerset) };
    cone->add_disjunct(origin);
    fastPairwiseReduce(*cone);

    return cone;
}

/*!
 *  \brief Constructs the cone of a convex polyhedron \f$P\f$.
 * \param poly The input convex polyhedron \f$P\f$ used to generate the cone.
 * \return A `PowersetUniquePtr` representing the cone of the convex polyhedron \f$P\f$.
 * \see coneGeometric
 */
inline PolyUniquePtr coneGenerator(const Poly& poly)
{
    const PPL::Generator_System& generatorSystem { poly.generators() };

    PPL::Generator_System cone {};
    for (const PPL::Generator& generator: generatorSystem)
        cone.insert(generator);

    PPL::Generator origin { PPL::point(PPLUtils::zeroPointLinearExpression(poly.space_dimension())) };
    cone.insert(origin);

    return std::make_unique<Poly>(cone);
}