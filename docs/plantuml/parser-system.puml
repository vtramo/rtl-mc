@startuml
package system <<Frame>> {
    class PolyhedralSystemBuilderVisitor {
        --data members--
        -m_visitor: PolyhedralSystemVisitor
        --constructors--
        +PolyhedralSystemBuilderVisitor(PolyhedralSystemSymbolTable& symbolTable)
        --member functions--
        +buildPolyhedralSystem(PolyhedralSystemParser::SystemContext* parseTree) : PolyhedralSystem
        +hasErrors() : bool
        +errors() : const std::vector<ParserError>&
    }

    class PolyhedralSystemBuilderVisitor::PolyhedralSystemVisitor {
        --data members--
        -m_flow : Poly
        -m_visitor : PolyhedralSystemVisitor
        -m_invariant : Powerset
        -m_visitKey : int
        -m_symbolTable : std::reference_wrapper<PolyhedralSystemSymbolTable>
        -m_constraints : std::unordered_map<int, std::unique_ptr<PPL::Constraint>>
        -m_linearExpressions : std::unordered_map<int, std::unique_ptr<PPL::Linear_Expression>>
        -m_polyhedra : std::unordered_map<int, std::unique_ptr<Poly>>
        -m_powersets : std::unordered_map<int, std::unique_ptr<Powerset>>
        -m_denotation : std::unordered_map<spot::formula, Powerset>
        -m_errors : std::vector<ParserError>
        --constructors--
        +PolyhedralSystemVisitor(PolyhedralSystemSymbolTable& symbolTable)
        --getters--
        +getFlow() : Poly
        +getSymbolTable() : PolyhedralSystemSymbolTable
        +getInvariant() : Powerset
        +getDenotation() : std::unordered_map<spot::formula, Powerset>
        --visit functions--
        +visitAtomEmpty(PolyhedralSystemParser::AtomEmptyContext* ctx) : std::any
        +visitAtomPoly(PolyhedralSystemParser::AtomPolyContext* ctx) : std::any
        +visitAtomPowerset(PolyhedralSystemParser::AtomPowersetContext* ctx) : std::any
        +visitConstr(PolyhedralSystemParser::ConstrContext* ctx) : std::any
        +visitFlow(PolyhedralSystemParser::FlowContext* ctx) : std::any
        +visitInt(PolyhedralSystemParser::IntContext* context) : std::any
        +visitIntTimesVar(PolyhedralSystemParser::IntTimesVarContext* context) : std::any
        +visitInv(PolyhedralSystemParser::InvContext* ctx) : std::any
        +visitLinearExpr(PolyhedralSystemParser::LinearExprContext* ctx) : std::any
        +visitPolyAtLeastOneConstr(PolyhedralSystemParser::PolyAtLeastOneConstrContext* ctx) : std::any
        +visitPolyTrue(PolyhedralSystemParser::PolyTrueContext* ctx) : std::any
        +visitPowersetEmptyOrNotEmpty(PolyhedralSystemParser::PowersetEmptyOrNotEmptyContext* ctx) : std::any
        +visitPowersetTrue(PolyhedralSystemParser::PowersetTrueContext* ctx) : std::any
        +visitSignTerm(PolyhedralSystemParser::SignTermContext* ctx) : std::any
        +visitSystem(PolyhedralSystemParser::SystemContext* ctx) : std::any
        +visitVar(PolyhedralSystemParser::VarContext* context) : std::any
        --private member functions--
        -containsAtom(std::string_view atom) : bool
        -containsAtom(const spot::formula& atom) : bool
        -addDuplicateAtomParserError(antlr4::tree::TerminalNode*) : void
        -popConstraint(int visitKey) : std::unique_ptr<PPL::Constraint>
        -popLinearExpression(int visitKey) : std::unique_ptr<PPL::Linear_Expression>
        -popPoly(int visitKey) : std::unique_ptr<Poly>
        -popPowerset(int visitKey) : std::unique_ptr<Powerset>
        --friends--
        class PolyhedralSystemBuilderVisitor
    }

    class PolyhedralSystemParsingResult {
        --data members--
        -m_lexicalErrorCount : int
        -m_syntaxErrorCount : int
        -m_semanticErrorCount : int
        -m_polyhedralSystem : std::unique_ptr<PolyhedralSystem>
        -m_errors : std::vector<ParserError>
        --constructors--
        +PolyhedralSystemParsingResult(std::vector<ParserError> errors)
        +PolyhedralSystemParsingResult(PolyhedralSystem&& polyhedralSystem)
        --member functions--
        +ok() : bool
        +errorCount() : int
        +lexicalErrorCount() : int
        +syntaxErrorCount() : int
        +semanticErrorCount() : int
        +errors() : std::vector<ParserError>
        +lexicalErrors() : std::vector<ParserError>
        +syntaxErrors() : std::vector<ParserError>
        +semanticErrors() : std::vector<ParserError>
        -isLexicalError(const ParserError& error) : bool
        -isSyntaxError(const ParserError& error) : bool
        -isSemanticError(const ParserError& error) : bool
        --operators--
        +operator*() : PolyhedralSystem&
        +operator!() : bool
    }

    class PolyhedralSystemSymbolTableListener {
        --data members--
        -m_symbolTable : PolyhedralSystemSymbolTable
        --member functions--
        +getSymbolTable() : PolyhedralSystemSymbolTable
        +enterAtomEmpty(PolyhedralSystemParser::AtomEmptyContext* ctx) : void
        +enterAtomPoly(PolyhedralSystemParser::AtomPolyContext* ctx) : void
        +enterAtomPowerset(PolyhedralSystemParser::AtomPowersetContext* ctx) : void
        +enterIntTimesVar(PolyhedralSystemParser::IntTimesVarContext* ctx) : void
        +enterVar(PolyhedralSystemParser::VarContext* ctx) : void
        -addAtom(std::string_view atomId) : void
        -addVariable(std::string_view varId) : void
    }

    object systemparser_h_cpp {
        +parsePolyhedralSystem(std::string_view input) : PolyhedralSystemParsingResult
        +parsePolyhedralSystem(std::istream& input) : PolyhedralSystemParsingResult
        +parsePolyhedralSystem(antlr4::ANTLRInputStream* input) : PolyhedralSystemParsingResult
    }

    package generated {
        abstract class PolyhedralSystemVisitor {
            +{abstract} visitAtomEmpty(PolyhedralSystemParser::AtomEmptyContext* context) : std::any
            +{abstract} visitAtomError(PolyhedralSystemParser::AtomErrorContext* context) : std::any
            +{abstract} visitAtomPoly(PolyhedralSystemParser::AtomPolyContext* context) : std::any
            +{abstract} visitAtomPowerset(PolyhedralSystemParser::AtomPowersetContext* context) : std::any
            +{abstract} visitConstr(PolyhedralSystemParser::ConstrContext* context) : std::any
            +{abstract} visitFlow(PolyhedralSystemParser::FlowContext* context) : std::any
            +{abstract} visitInt(PolyhedralSystemParser::IntContext* context) : std::any
            +{abstract} visitIntTimesVar(PolyhedralSystemParser::IntTimesVarContext* context) : std::any
            +{abstract} visitInv(PolyhedralSystemParser::InvContext* context) : std::any
            +{abstract} visitLinearExpr(PolyhedralSystemParser::LinearExprContext* context) : std::any
            +{abstract} visitPolyAtLeastOneConstr(PolyhedralSystemParser::PolyAtLeastOneConstrContext* context) : std::any
            +{abstract} visitPolyError(PolyhedralSystemParser::PolyErrorContext* context) : std::any
            +{abstract} visitPolyTrue(PolyhedralSystemParser::PolyTrueContext* context) : std::any
            +{abstract} visitPowersetEmptyOrNotEmpty(PolyhedralSystemParser::PowersetEmptyOrNotEmptyContext* context) : std::any
            +{abstract} visitPowersetError(PolyhedralSystemParser::PowersetErrorContext* context) : std::any
            +{abstract} visitPowersetTrue(PolyhedralSystemParser::PowersetTrueContext* context) : std::any
            +{abstract} visitSignTerm(PolyhedralSystemParser::SignTermContext* context) : std::any
            +{abstract} visitSystem(PolyhedralSystemParser::SystemContext* context) : std::any
            +{abstract} visitTermError(PolyhedralSystemParser::TermErrorContext* context) : std::any
            +{abstract} visitVar(PolyhedralSystemParser::VarContext* context) : std::any
        }

        class PolyhedralSystemBaseVisitor {
            +visitAtomEmpty(PolyhedralSystemParser::AtomEmptyContext* ctx) : std::any
            +visitAtomError(PolyhedralSystemParser::AtomErrorContext* ctx) : std::any
            +visitAtomPoly(PolyhedralSystemParser::AtomPolyContext* ctx) : std::any
            +visitAtomPowerset(PolyhedralSystemParser::AtomPowersetContext* ctx) : std::any
            +visitConstr(PolyhedralSystemParser::ConstrContext* ctx) : std::any
            +visitFlow(PolyhedralSystemParser::FlowContext* ctx) : std::any
            +visitInt(PolyhedralSystemParser::IntContext* ctx) : std::any
            +visitIntTimesVar(PolyhedralSystemParser::IntTimesVarContext* ctx) : std::any
            +visitInv(PolyhedralSystemParser::InvContext* ctx) : std::any
            +visitLinearExpr(PolyhedralSystemParser::LinearExprContext* ctx) : std::any
            +visitPolyAtLeastOneConstr(PolyhedralSystemParser::PolyAtLeastOneConstrContext* ctx) : std::any
            +visitPolyError(PolyhedralSystemParser::PolyErrorContext* ctx) : std::any
            +visitPolyTrue(PolyhedralSystemParser::PolyTrueContext* ctx) : std::any
            +visitPowersetEmptyOrNotEmpty(PolyhedralSystemParser::PowersetEmptyOrNotEmptyContext* ctx) : std::any
            +visitPowersetError(PolyhedralSystemParser::PowersetErrorContext* ctx) : std::any
            +visitPowersetTrue(PolyhedralSystemParser::PowersetTrueContext* ctx) : std::any
            +visitSignTerm(PolyhedralSystemParser::SignTermContext* ctx) : std::any
            +visitSystem(PolyhedralSystemParser::SystemContext* ctx) : std::any
            +visitTermError(PolyhedralSystemParser::TermErrorContext* ctx) : std::any
            +visitVar(PolyhedralSystemParser::VarContext* ctx) : std::any
        }

        class PolyhedralSystemParser {
            +PolyhedralSystemParser(antlr4::TokenStream* input)
            +PolyhedralSystemParser(antlr4::TokenStream* input, const antlr4::atn::ParserATNSimulatorOptions& options)
            +~PolyhedralSystemParser()
            +atom() : AtomContext*
            +constr() : ConstrContext*
            +flow() : FlowContext*
            +inv() : InvContext*
            +linearExpr() : LinearExprContext*
            +poly() : PolyContext*
            +powerset() : PowersetContext*
            +signTerm() : SignTermContext*
            +system() : SystemContext*
            +term() : TermContext*
            +getATN() : antlr4::atn::ATN& {query}
            +getSerializedATN() : antlr4::atn::SerializedATNView {query}
            +getVocabulary() : antlr4::dfa::Vocabulary& {query}
            +getGrammarFileName() : std::string {query}
            +getRuleNames() : std::vector<std::string>& {query}
            +{static} initialize() : void
        }

        abstract class PolyhedralSystemListener {
        	+{abstract} enterAtomEmpty(PolyhedralSystemParser::AtomEmptyContext* ctx) : void
        	+{abstract} enterAtomError(PolyhedralSystemParser::AtomErrorContext* ctx) : void
        	+{abstract} enterAtomPoly(PolyhedralSystemParser::AtomPolyContext* ctx) : void
        	+{abstract} enterAtomPowerset(PolyhedralSystemParser::AtomPowersetContext* ctx) : void
        	+{abstract} enterConstr(PolyhedralSystemParser::ConstrContext* ctx) : void
        	+{abstract} enterFlow(PolyhedralSystemParser::FlowContext* ctx) : void
        	+{abstract} enterInt(PolyhedralSystemParser::IntContext* ctx) : void
        	+{abstract} enterIntTimesVar(PolyhedralSystemParser::IntTimesVarContext* ctx) : void
        	+{abstract} enterInv(PolyhedralSystemParser::InvContext* ctx) : void
        	+{abstract} enterLinearExpr(PolyhedralSystemParser::LinearExprContext* ctx) : void
        	+{abstract} enterPolyAtLeastOneConstr(PolyhedralSystemParser::PolyAtLeastOneConstrContext* ctx) : void
        	+{abstract} enterPolyError(PolyhedralSystemParser::PolyErrorContext* ctx) : void
        	+{abstract} enterPolyTrue(PolyhedralSystemParser::PolyTrueContext* ctx) : void
        	+{abstract} enterPowersetEmptyOrNotEmpty(PolyhedralSystemParser::PowersetEmptyOrNotEmptyContext* ctx) : void
        	+{abstract} enterPowersetError(PolyhedralSystemParser::PowersetErrorContext* ctx) : void
        	+{abstract} enterPowersetTrue(PolyhedralSystemParser::PowersetTrueContext* ctx) : void
        	+{abstract} enterSignTerm(PolyhedralSystemParser::SignTermContext* ctx) : void
        	+{abstract} enterSystem(PolyhedralSystemParser::SystemContext* ctx) : void
        	+{abstract} enterTermError(PolyhedralSystemParser::TermErrorContext* ctx) : void
        	+{abstract} enterVar(PolyhedralSystemParser::VarContext* ctx) : void
        	+{abstract} exitAtomEmpty(PolyhedralSystemParser::AtomEmptyContext* ctx) : void
        	+{abstract} exitAtomError(PolyhedralSystemParser::AtomErrorContext* ctx) : void
        	+{abstract} exitAtomPoly(PolyhedralSystemParser::AtomPolyContext* ctx) : void
        	+{abstract} exitAtomPowerset(PolyhedralSystemParser::AtomPowersetContext* ctx) : void
        	+{abstract} exitConstr(PolyhedralSystemParser::ConstrContext* ctx) : void
        	+{abstract} exitFlow(PolyhedralSystemParser::FlowContext* ctx) : void
        	+{abstract} exitInt(PolyhedralSystemParser::IntContext* ctx) : void
        	+{abstract} exitIntTimesVar(PolyhedralSystemParser::IntTimesVarContext* ctx) : void
        	+{abstract} exitInv(PolyhedralSystemParser::InvContext* ctx) : void
        	+{abstract} exitLinearExpr(PolyhedralSystemParser::LinearExprContext* ctx) : void
        	+{abstract} exitPolyAtLeastOneConstr(PolyhedralSystemParser::PolyAtLeastOneConstrContext* ctx) : void
        	+{abstract} exitPolyError(PolyhedralSystemParser::PolyErrorContext* ctx) : void
        	+{abstract} exitPolyTrue(PolyhedralSystemParser::PolyTrueContext* ctx) : void
        	+{abstract} exitPowersetEmptyOrNotEmpty(PolyhedralSystemParser::PowersetEmptyOrNotEmptyContext* ctx) : void
        	+{abstract} exitPowersetError(PolyhedralSystemParser::PowersetErrorContext* ctx) : void
        	+{abstract} exitPowersetTrue(PolyhedralSystemParser::PowersetTrueContext* ctx) : void
        	+{abstract} exitSignTerm(PolyhedralSystemParser::SignTermContext* ctx) : void
        	+{abstract} exitSystem(PolyhedralSystemParser::SystemContext* ctx) : void
        	+{abstract} exitTermError(PolyhedralSystemParser::TermErrorContext* ctx) : void
        	+{abstract} exitVar(PolyhedralSystemParser::VarContext* ctx) : void
        }

        class PolyhedralSystemBaseListener {
        	+enterAtomEmpty(PolyhedralSystemParser::AtomEmptyContext*) : void
        	+enterAtomError(PolyhedralSystemParser::AtomErrorContext*) : void
        	+enterAtomPoly(PolyhedralSystemParser::AtomPolyContext*) : void
        	+enterAtomPowerset(PolyhedralSystemParser::AtomPowersetContext*) : void
        	+enterConstr(PolyhedralSystemParser::ConstrContext*) : void
        	+enterEveryRule(antlr4::ParserRuleContext*) : void
        	+enterFlow(PolyhedralSystemParser::FlowContext*) : void
        	+enterInt(PolyhedralSystemParser::IntContext*) : void
        	+enterIntTimesVar(PolyhedralSystemParser::IntTimesVarContext*) : void
        	+enterInv(PolyhedralSystemParser::InvContext*) : void
        	+enterLinearExpr(PolyhedralSystemParser::LinearExprContext*) : void
        	+enterPolyAtLeastOneConstr(PolyhedralSystemParser::PolyAtLeastOneConstrContext*) : void
        	+enterPolyError(PolyhedralSystemParser::PolyErrorContext*) : void
        	+enterPolyTrue(PolyhedralSystemParser::PolyTrueContext*) : void
        	+enterPowersetEmptyOrNotEmpty(PolyhedralSystemParser::PowersetEmptyOrNotEmptyContext*) : void
        	+enterPowersetError(PolyhedralSystemParser::PowersetErrorContext*) : void
        	+enterPowersetTrue(PolyhedralSystemParser::PowersetTrueContext*) : void
        	+enterSignTerm(PolyhedralSystemParser::SignTermContext*) : void
        	+enterSystem(PolyhedralSystemParser::SystemContext*) : void
        	+enterTermError(PolyhedralSystemParser::TermErrorContext*) : void
        	+enterVar(PolyhedralSystemParser::VarContext*) : void
        	+exitAtomEmpty(PolyhedralSystemParser::AtomEmptyContext*) : void
        	+exitAtomError(PolyhedralSystemParser::AtomErrorContext*) : void
        	+exitAtomPoly(PolyhedralSystemParser::AtomPolyContext*) : void
        	+exitAtomPowerset(PolyhedralSystemParser::AtomPowersetContext*) : void
        	+exitConstr(PolyhedralSystemParser::ConstrContext*) : void
        	+exitEveryRule(antlr4::ParserRuleContext*) : void
        	+exitFlow(PolyhedralSystemParser::FlowContext*) : void
        	+exitInt(PolyhedralSystemParser::IntContext*) : void
        	+exitIntTimesVar(PolyhedralSystemParser::IntTimesVarContext*) : void
        	+exitInv(PolyhedralSystemParser::InvContext*) : void
        	+exitLinearExpr(PolyhedralSystemParser::LinearExprContext*) : void
        	+exitPolyAtLeastOneConstr(PolyhedralSystemParser::PolyAtLeastOneConstrContext*) : void
        	+exitPolyError(PolyhedralSystemParser::PolyErrorContext*) : void
        	+exitPolyTrue(PolyhedralSystemParser::PolyTrueContext*) : void
        	+exitPowersetEmptyOrNotEmpty(PolyhedralSystemParser::PowersetEmptyOrNotEmptyContext*) : void
        	+exitPowersetError(PolyhedralSystemParser::PowersetErrorContext*) : void
        	+exitPowersetTrue(PolyhedralSystemParser::PowersetTrueContext*) : void
        	+exitSignTerm(PolyhedralSystemParser::SignTermContext*) : void
        	+exitSystem(PolyhedralSystemParser::SystemContext*) : void
        	+exitTermError(PolyhedralSystemParser::TermErrorContext*) : void
        	+exitVar(PolyhedralSystemParser::VarContext*) : void
        	+visitErrorNode(antlr4::tree::ErrorNode*) : void
        	+visitTerminal(antlr4::tree::TerminalNode*) : void
        }

    }
}

PolyhedralSystemVisitor <|-- PolyhedralSystemBaseVisitor
PolyhedralSystemListener <|-- PolyhedralSystemBaseListener
PolyhedralSystemBuilderVisitor +--> PolyhedralSystemBuilderVisitor::PolyhedralSystemVisitor
PolyhedralSystemSymbolTableListener --|> PolyhedralSystemBaseListener
systemparser_h_cpp ..> PolyhedralSystemParsingResult: create
@enduml