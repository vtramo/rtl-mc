@startuml parser-rtlf
package rtlf {
    class RtlfParsingResult {
        --data members--
        -m_isLtl : const bool
        -m_parserErrors : const std::vector<ParserError>
        -m_illegalAtoms : std::vector<spot::formula>
        -m_rtlf : std::optional<spot::formula>
        --constructors--
        -RtlfParsingResult(std::optional<spot::formula>&& rtlf, std::vector<ParserError>&& parserErrors, std::vector<spot::formula>&& illegalAtoms, const bool isLtl)
        -RtlfParsingResult(std::vector<ParserError>&& parserErrors)
        -RtlfParsingResult(spot::formula&& rtlf, const bool isLtl)
        -RtlfParsingResult(std::vector<spot::formula>&& forbiddenAtoms, const bool isLtl)
        -RtlfParsingResult(spot::formula&& rtlf)
        --methods--
        +hasParserErrors() : bool
        +isLtl() : bool
        +isUsingIllegalAtoms() : bool
        +ok() : bool
        +illegalAtoms() : spot::atomic_prop_vector
        +parserErrors() : std::vector<ParserError>
        -setIllegalAtoms(std::vector<spot::formula>&& illegalAtoms) : void
        --operators--
        +operator!() : bool
        +operator*() : spot :: formula&
        --friends--
        -parseRtlf(const std::string_view rtlf, const spot::atomic_prop_set& allowedAtomicPropositions): RtlfParsingResult
        --static functions--
        +{static} notLtlFormula(spot::formula&& rtlf) : RtlfParsingResult
        +{static} ok(spot::formula&& rtlf) : RtlfParsingResult
        +{static} withParserErrors(std::vector<ParserError>&& parserErrors) : RtlfParsingResult
    }

    object parsertlf_h_cpp {
        +parseRtlf(std::string_view rtlf): RtlfParsingResult
        +parseRtlf(const std::string_view rtlf, const spot::atomic_prop_set& allowedAtomicPropositions): RtlfParsingResult
        -toRtlfParsingResult(spot::parse_error_list&& spotErrors): RtlfParsingResult
    }
}

class spot::formula {}

RtlfParsingResult --> "0..1" spot::formula
parsertlf_h_cpp ...> RtlfParsingResult : create

@enduml