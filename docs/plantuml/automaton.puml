@startuml

/' Objects '/
package automaton {
    class BackwardNFA {
        --type aliases--
        +using EdgeIterator = spot::internal::state_out<spot::digraph<spot::twa_graph_state, spot::twa_graph_edge_data>>
        -using RenumberingContextVoidPtr = void*
        --data members--
        -m_discreteLtlFormula : DiscreteLtlFormula
        -m_formulaDenotationMap : PolyhedralSystemFormulaDenotationMap
        -m_backwardNfa : spot::twa_graph_ptr
        -m_stateDenotationById : std::unordered_map<int, StateDenotation>
        -m_initialStates : std::unordered_set<int>
        -m_finalStates : std::unordered_set<int>
        -m_dummyInitialEdges : int
        -m_optimizationLevel : spot::postprocessor::optimization_level
        --constructors--
        +BackwardNFA(const DiscreteLtlFormula& discreteLtlFormula, PolyhedralSystemFormulaDenotationMap&& polyhedralSystemLabelDenotationMap, spot::postprocessor::optimization_level optimizationLevel = spot::postprocessor::optimization_level::High, bool anyOption = false)
        +BackwardNFA(DiscreteLtlFormula&& discreteLtlFormula, PolyhedralSystemFormulaDenotationMap&& polyhedralSystemFormulaDenotationMap, spot::postprocessor::optimization_level optimizationLevel = spot::postprocessor::optimization_level::High, bool anyOption = false)
        --member functions--
        +formula() : const DiscreteLtlFormula&
        +predecessors(int state) : EdgeIterator
        +stateDenotation(int state) : const StateDenotation&
        +hasPredecessors(int state) : bool
        +isFinalState(int state) : bool
        +isInitialState(int state) : bool
        +totalEdges() : int
        +totalInitialStates() : int
        +totalFinalStates() : int
        +totalStates() : int
        +initialStates() : const std::unordered_set<int>&
        +finalStates() : const std::unordered_set<int>&
        +optimizationLevel() : spot::postprocessor::optimization_level
        +printDotFormat(std::ostream& os) : void
        +printHoaFormat(std::ostream& os) : void
        -buildAutomaton(const spot::const_twa_graph_ptr& nfa, const std::unordered_set<int>& nfaAcceptingStates) : void
        -extractStateDenotationFromEdgeGuard(const spot::const_twa_graph_ptr& nfa, const bdd& guard) : StateDenotation
        -createDummyInitialStateWithEdgesToFinalStatesHavingPredecessors() : void
        --static functions--
        -{static} renumberOrRemoveStatesAfterPurge(const std::vector<unsigned>& newst, RenumberingContextVoidPtr renumberingContextVoidPtr) : void
        -{static} killAcceptingStates(const spot::twa_graph_ptr& nfa) : std::unordered_set<int>
        --operators--
        +operator<< (std::ostream& out, const BackwardNFA& backwardNfa) : std::ostream&
    }

    struct RenumberingContext {
        --data members--
        m_initialStates : std::unordered_set<int>*
        m_finalStates : std::unordered_set<int>*
        m_stateDenotationById : std::unordered_map<int, StateDenotation>*
        --constructors--
        RenumberingContext(std::unordered_set<int>* initialStates, std::unordered_set<int>* finalStates, std::unordered_map<int, StateDenotation>*)
        explicit RenumberingContext(std::unordered_set<int>* finalStates)
    }

    class PolyhedralSystemFormulaDenotationMap {
        --type aliases--
        -using FormulaToString = std::string;
        -using FormulaId = size_t;
        --data members--
        -m_polyhedralSystem : PolyhedralSystemConstSharedPtr
        -m_powersetByFormula : std::unordered_map<FormulaId, std::tuple<PowersetConstSharedPtr, FormulaToString>>
        --constructors--
        +PolyhedralSystemFormulaDenotationMap(PolyhedralSystemConstSharedPtr polyhedralSystem)
        +PolyhedralSystemFormulaDenotationMap(PolyhedralSystemFormulaDenotationMap&& other)
        -PolyhedralSystemFormulaDenotationMap() = default
        --member functions--
        +getPolyhedralSystem() : const PolyhedralSystem&
        +getOrComputeDenotation(const spot::formula& formula) : PowersetConstSharedPtr
        +containsDenotation(const spot::formula& formula) : bool
        -computeFormulaDenotation(const spot::formula& formula) : PowersetConstSharedPtr
        -getAtomInterpretation(const spot::formula& formula) : const AtomInterpretation*
        -void saveFormulaDenotation(const spot::formula& formula, PowersetConstSharedPtr denotation) : void
        --operators--
        +operator<< (std::ostream& out, PolyhedralSystemFormulaDenotationMap& polyhedralSystemFormulaDenotationMap) : std::ostream&
    }

    class StateDenotation {
        --data members--
        -m_formula : spot::formula
        -m_denotation : PowersetConstSharedPtr
        -m_isSing : bool
        --constructors--
        +StateDenotation(spot::formula&& formula, PowersetConstSharedPtr denotation, const bool isSing = false)
        +StateDenotation(StateDenotation&& other)
        --member functions--
        +formula() : const spot::formula&
        +denotation() : PowersetConstSharedPtr
        +isSingular() : bool
        +isUniverse() : bool
        +isEmpty() : bool
        +print(std::ostream& ostream, const PolyhedralSystemSymbolTable& symbolTable) : void
    }
}

class spot::twa_graph_ptr {}
class spot::formula {}

BackwardNFA *--> "1" spot::twa_graph_ptr
BackwardNFA *--> "1" PolyhedralSystemFormulaDenotationMap
BackwardNFA *--> "*" StateDenotation
BackwardNFA #--> RenumberingContext
@enduml
