@startuml
package mcsolvers {
    package emptiness
    {
        enum ExplicitEmptinessCheckAlgorithm
        {
            se05,
            tau03,
            magic
        }

        object emptiness_algorithms_h {
            -static emptinessCheckAlgorithm(const EmptinessCheckAlgorithm algorithm, spot::const_twa_graph_ptr twa): spot::emptiness_check_ptr

            +inline explicitEmptinessCheckDenotationSearch(PolyhedralSynchronousProductAutomatonConstSharedPtr synchronousProductAutomaton, const EmptinessCheckAlgorithm algorithm = EmptinessCheckAlgorithm::magic): ExplicitEmptinessCheckDenotationResult

            -static buildTransposedTwaWithInitialStateWithEdgesToAcceptingStatesInNonTrivialScc(const PolyhedralSynchronousProductAutomaton& automaton): spot::twa_graph_ptr
            -static buildTransposedTwaWithInitialStateWithEdgesToAcceptingStates(const PolyhedralSynchronousProductAutomaton& automaton): spot::twa_graph_ptr

            +inline collectInitialStatesWithAcceptingRuns(const PolyhedralSynchronousProductAutomaton& automaton): std::unordered_set<unsigned>
        }

        struct ExplicitEmptinessCheckDenotationResult
        {
            +acceptingRuns: std::vector<spot::twa_run>
            +initialStates: std::set<unsigned>
            +totalAcceptingRuns: int
            +isEmpty: int
            +result: PowersetSharedPtr
            +elapsedTimeInSeconds: double
        }
    }

    class DenotOnTheFly {
        --data members--
        -m_iterations: int
        -m_polyhedralSystem: PolyhedralSystemConstSharedPtr
        -m_backwardNfa: const BackwardNFA&
        -m_maxRecursionDepth: int
        --constructors--
        +DenotOnTheFly(const PolyhedralSystemConstSharedPtr polyhedralSystem, const BackwardNFA& backwardNfa)
        --member functions--
        +run(): PowersetUniquePtr
        +totalIterations(): int
        -denot(const int state, const Poly& P, const Poly& X, std::unordered_map<int, Powerset> V): PowersetUniquePtr
        -addDisjunct(std::vector<Powerset>& V, int state, const Poly& P): void
        -getDisjunct(std::vector<Powerset>& V, int state): const Powerset&
        --operators--
        +operator() (): PowersetUniquePtr
    }

    abstract class Solver {
        --type aliases--
        +using SolverUniquePtr = std::unique_ptr<Solver>
        --data members--
        #m_polyhedralSystem: PolyhedralSystemSharedPtr
        #m_rtlFormula: spot::formula
        #m_universalDenotation: bool
        #m_automatonOptimizationFlags: AutomatonOptimizationFlags
        #m_discreteLtlFormula: DiscreteLtlFormula
        #m_solverStats: std::shared_ptr<SolverStats>
        --constructors--
        +Solver(PolyhedralSystemSharedPtr polyhedralSystem, const spot::formula& rtlFormula, AutomatonOptimizationFlags automatonOptimizationFlags, bool universalDenotation = false)
        +virtual ~Solver() = default
        --member functions--
        +virtual run() = 0: PowersetSharedPtr
        +virtual stats(): const SolverStats&
        #virtual preprocessPolyhedralSystem() = 0: void
        #virtual preprocessRtlFormula(): void
        #virtual logPolyhedralSystemAndCollectStats(): void
        #virtual logRtlFormulaAndCollectStats(): void
        #virtual discretiseRtlFormula() = 0: double
        #virtual logAndCollectDiscretisationStats(double discretisationExecutionTimeSeconds): void
        --operators--
        +operator() () : PowersetSharedPtr
    }

    class FiniteOnTheFlySolver {
        --data members--
        #m_backwardNfa: BackwardNFAConstSharedPtr
        #m_finiteOnTheFlySolverStats: std::shared_ptr<FiniteOnTheFlySolverStats>
        #m_denotStats: DenotStats
        #m_concurrent: bool
        #m_discretiseRtlfDirectToLtl: bool
        --constructors--
        +FiniteOnTheFlySolver(PolyhedralSystemSharedPtr polyhedralSystem, spot::formula rtlFormula, AutomatonOptimizationFlags automatonOptimizationFlags, bool universalDenotation = false, bool concurrent = false)
        +~FiniteOnTheFlySolver() override
        --member functions--
        +stats(): const FiniteOnTheFlySolverStats&
        +run() override: PowersetSharedPtr
        #preprocessPolyhedralSystem() override
        #discretiseRtlFormula() override : double
        #constructBackwardFiniteLtlAutomaton()
        #startDenotAlgorithm() : PowersetUniquePtr
        #createDenotAlgorithm() : std::unique_ptr<Denot>
    }

    class StayFiniteOnTheFlySolver {
        --constructors--
        +StayFiniteOnTheFlySolver(PolyhedralSystemSharedPtr polyhedralSystem, const spot::formula& rtlFormula, AutomatonOptimizationFlags automatonOptimizationFlags, bool universalDenotation = false, bool concurrent = false, bool m_discretiseRtlfDirectToLtl = false)
        +~StayFiniteOnTheFlySolver() override
        --member functions--
        #preprocessPolyhedralSystem() override: void
        #preprocessRtlFormula() override: double
    }
    
    class BrinkFiniteOnTheFlySolver {
        --data members--
        #m_brinkSemantics: BrinkSemantics
        --constructors--
        +BrinkFiniteOnTheFlySolver(PolyhedralSystemSharedPtr polyhedralSystem, const spot::formula& rtlFormula, AutomatonOptimizationFlags automatonOptimizationFlags, bool universalDenotation = false, bool concurrent = false, bool m_discretiseRtlfDirectToLtl = false)
        +~BrinkFiniteOnTheFlySolver() override
        --member functions--
        #preprocessPolyhedralSystem() override: void
        #preprocessRtlFormula() override: double
    }

    class BrinkStayFiniteOnTheFlySolver {
        --data members--
        #m_staySolver: std::shared_Ptr<StayFiniteOnTheFlySolver>
        #m_brinkSolver: std::shared_Ptr<BrinkFiniteOnTheFlySolver>
        #m_brinkSemantics: BrinkSemantics
        --constructors--
        +BrinkStayFiniteOnTheFlySolver(PolyhedralSystemSharedPtr polyhedralSystem, const spot::formula& rtlFormula, AutomatonOptimizationFlags automatonOptimizationFlags, bool universalDenotation = false, bool concurrent = false, bool m_discretiseRtlfDirectToLtl = false)
        +~BrinkStayFiniteOnTheFlySolver() override
        --member functions--
        #run() override: PowersetSharedPtr
        #preprocessPolyhedralSystem() override: void
        #preprocessRtlFormula() override: double
        #logPolyhedralSystemAndCollectStats() override: void
        #logRtlFormulaAndCollectStats() override: void
    }

    StayFiniteOnTheFlySolver --|> FiniteOnTheFlySolver
    BrinkFiniteOnTheFlySolver --|> FiniteOnTheFlySolver
    BrinkFiniteOnTheFlySolver --> "1" BrinkSemantics
    BrinkStayFiniteOnTheFlySolver --|> FiniteOnTheFlySolver
    BrinkStayFiniteOnTheFlySolver --> "1" StayFiniteOnTheFlySolver
    BrinkStayFiniteOnTheFlySolver --> "1" BrinkFiniteOnTheFlySolver
    BrinkStayFiniteOnTheFlySolver --> "1" BrinkSemantics

    enum BrinkSemantics {
        may
        must
    }

    abstract ExplicitSolver {
        --data members--
        #m_polyhedralAbstraction: PolyhedralAbstractionSharedPtr
        #m_ltlAutomaton: PolyhedralLtlAutomatonSharedPtr
        #m_polyhedralSynchronousProduct: PolyhedralSynchronousProductAutomatonSharedPtr
        --constructors--
        +ExplicitSolver(PolyhedralSystemSharedPtr polyhedralSystem, const spot::formula& rtlFormula, AutomatonOptimizationFlags automatonOptimizationFlags, bool universalDenotation = false)
        +~ExplicitSolver() override
        --member functions--
        #virtual constructPolyhedralAbstraction() = 0: void
        #virtual constructPolyhedralLtlAutomaton() = 0: void
        #virtual constructSynchronousProductAutomaton(): void
    }

    abstract GeneralSolver {
        --constructors--
        +GeneralSolver(PolyhedralSystemSharedPtr polyhedralSystem, const spot::formula& rtlFormula, AutomatonOptimizationFlags automatonOptimizationFlags, bool universalDenotation = false)
        +virtual ~GeneralSolver() = default
        --member functions--
        #constructPolyhedralAbstraction() override: void
        #virtual maxPatches(const std::vector<Observable>& observables): int
    }

    class GeneralFiniteSolver {
        --constructors--
        +GeneralFiniteSolver(PolyhedralSystemSharedPtr, const spot::formula& rtlFormula, AutomatonOptimizationFlags automatonOptimizationFlags, bool universalDenotation = false)
        +~GeneralFiniteSolver() override
        --member functions--
        +run(): PowersetSharedPtr
        #discretiseRtlFormula() override: double
        #constructPolyhedralLtlAutomaton() override: void
        #virtual runFiniteSemanticsDfs(): PowersetSharedPtr
    }

    GeneralFiniteSolver --|> GeneralSolver
    GeneralSolver --|> ExplicitSolver
    ExplicitSolver --|> Solver
    FiniteOnTheFlySolver --|> Solver
    FiniteOnTheFlySolver ..> DenotOnTheFly


    abstract OmnidirectionalSolver {
        --constructors--
        +OmnidirectionalSolver(PolyhedralSystemSharedPtr, const spot::formula& rtlFormula, AutomatonOptimizationFlags automatonOptimizationFlags, bool universalDenotation = false)
        +~OmnidirectionalSolver() override
        --member functions--
        #constructPolyhedralAbstraction() override: void
    }

    class OmnidirectionalFiniteSolver {
        --constructors--
        +OmnidirectionalFiniteSolver(PolyhedralSystemSharedPtr, const spot::formula& rtlFormula, AutomatonOptimizationFlags automatonOptimizationFlags, bool universalDenotation = false)
        +~OmnidirectionalFiniteSolver() override
        --member functions--
        +run() override: PowersetSharedPtr
        #discretiseRtlFormula() override: double
        #constructPolyhedralLtlAutomaton() override: void
        #virtual runFiniteEmptinessCheckDenotationSearch(): PowersetSharedPtr
    }

    class OmnidirectionalInfiniteSolver {
        --constructors--
        +OmnidirectionalInfiniteSolver(PolyhedralSystemSharedPtr, const spot::formula& rtlFormula, AutomatonOptimizationFlags automatonOptimizationFlags, bool universalDenotation = false)
        +~OmnidirectionalInfiniteSolver()
        --member functions--
        +run() override: PowersetSharedPtr
        #discretiseRtlFormula() override: double
        #constructPolyhedralLtlAutomaton() override: void
        #runEmptinessCheckDenotation(): PowersetSharedPtr
    }

    OmnidirectionalInfiniteSolver ...> emptiness_algorithms_h: use
    OmnidirectionalFiniteSolver ...> emptiness_algorithms_h: use

    class OmnidirectionalMaySolver {
        --constructors--
        +OmnidirectionalMaySolver(PolyhedralSystemSharedPtr, const spot::formula& rtlFormula, AutomatonOptimizationFlags automatonOptimizationFlags, bool universalDenotation = false)
        +~OmnidirectionalMaySolver()
        --member functions--
        +run() override: PowersetSharedPtr
        #preprocessRtlFormula() override: void
        #discretiseRtlFormula() override: double
        #constructPolyhedralLtlAutomaton override: void
        #preprocessPolyhedralSystem() override: void
    }

    OmnidirectionalMaySolver --|> OmnidirectionalSolver
    OmnidirectionalSolver --|> ExplicitSolver
    OmnidirectionalFiniteSolver --|> OmnidirectionalSolver
    OmnidirectionalInfiniteSolver --|> OmnidirectionalSolver
}
@enduml