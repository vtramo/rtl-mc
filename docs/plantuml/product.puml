@startuml

package product {
    abstract Automaton {}
    class PolyhedralSynchronousProductAutomaton {
        --type aliases--
        +using PolyhedralSynchronousProductAutomatonConstSharedPtr = std::shared_ptr<PolyhedralSynchronousProductAutomaton>
        -- data members --
        -m_productStatePair: spot::product_states*
        -m_ltlAutomaton: PolyhedralLtlAutomatonConstSharedPtr
        -m_abstraction: PolyhedralAbstractionConstSharedPtr
        -m_denotationByState: std::unordered_map<int, PowersetConstSharedPtr>
        -m_initialStates: std::unordered_set<int>
        -m_acceptingStates: std::unordered_set<int>
        -- constructors --
        +PolyhedralSynchronousProductAutomaton(PolyhedralLtlAutomatonConstSharedPtr nfa, PolyhedralAbstractionConstSharedPtr abstraction)
        -- member functions --
        +points(state: unsigned) : PowersetConstSharedPtr
        +productStatePair(state: unsigned) : std::pair<int, int>
        +initialStates(): const std::unordered_set<unsigned>&
        +acceptingStates(): const std::unordered_set<unsigned>&
        -buildAutomaton() : void
        -stateDenotationContainsAbstractionPoints(unsigned nfaState, unsigned abstractionState)
    }

    PolyhedralSynchronousProductAutomaton --> "1" PolyhedralLtlAutomaton
    PolyhedralSynchronousProductAutomaton --> "1" PolyhedralAbstraction
    PolyhedralSynchronousProductAutomaton --|> Automaton
}
@enduml
