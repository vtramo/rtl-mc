@startuml

package cli {
    class RtlMcProgram {
        --data members--
        -m_rtlMcProgram: argparse::ArgumentParser
        -m_polyhedralSystemInputStream: std::istream*
        -m_rtlFormulaInputStream: std::istream*
        -m_polyhedralSystem: PolyhedralSystemSharedPtr
        -m_rtlFormula: spot::formula
        -m_semantics: Semantics
        -m_existential: bool
        -m_universal: bool
        -m_modelCheckingPointString: std::optional<string>
        -m_modelCheckingPoint: Poly
        -m_translationOptimizationFlags: translationOptimizationFlags
        -m_directLtl: bool
        -m_concurrent: bool
        -m_exportDot: bool
        -m_verbosityLevel: Verbosity
        -m_outputFormat: OutputFormat
        -m_statsFormat: std::string
        --constructors--
        +RtlMcProgram(const int argc, char *argv[], std::string_view version = "0.0.0")
        --member functions--
        +polyhedralSystem(): PolyhedralSystemSharedPtr
        +rtlFormula(): const spot::formula&
        +translationOptimizationFlags(): const translationOptimizationFlags&
        +universal(): bool
        +existential(): bool
        +modelChecking(): bool
        +modelCheckingPoint(): Poly
        +directLtl(): bool
        +concurrent(): bool
        +verbosityLevel(): Verbosity
        +outputFormat(): OutputFormat
        +statsFormat(): std::string
        +semantics(): Semantics
        +isExportDotEnabled(): bool
        -buildRtlMcProgram(): void
        -addDescription(): void
        -addInputArguments(): void
        -addSemanticsArguments(): void
        -addSemanticsTypeArgument(): void
        -addUniversalOrExistentialArguments(): void
        -addModelCheckingArgument(): void
        -addtranslationOptimizationFlagsArguments(): void
        -addOutputFormatArguments(): void
        -addAdvancedArguments(): void
        -addExportDotArguments(): void
        -addDirectLtlArgument(): void
        -addConcurrentArgument(): void
        -parseArgs(int argc, char *argv[]): void
        -readAndParsePolyhedralSystem(): void
        -readAndParseRtlFormula(): void
        -parseModelCheckingPoint(): void
    }

    enum Semantics {
        fin,
        inf,
        may,
        must
    }

    enum OutputFormat {
        normal,
        quiet,
        stats
    }
}

enum Verbosity {
    silent,
    verbose,
    veryVerbose,
    debug,
    trace

    totVerbosityLevels
}
RtlMcProgram ---> "1" Verbosity
RtlMcProgram ---> "1" OutputFormat

@enduml
