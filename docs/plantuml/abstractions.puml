@startuml

class Observable {}
struct "std::hash<Observable>" as ObservableHash {
    +std::size_t operator() (const Observable& observable) const noexcept
}

package abstractions {
        abstract PolyhedralAbstraction {
            --type aliases--
            +using PolyhedralAbstractionConstSharedPtr = std::shared_ptr<PolyhedralAbstraction>
            --data members--
            #m_polyhedralSystem: PolyhedralSystemConstSharedPtr
            #m_spaceDimension: PPL::dimension_type
            --constructors--
            +PolyhedralAbstraction(PolyhedralSystemConstSharedPtr polyhedralSystem, std::string_view name)
            +virtual ~PolyhedralAbstraction() = default
            --member functions--
            +virtual points(unsigned state): PowersetConstSharedPtr
            +virtual observable(unsigned state): const Observable&
            +virtual initialState(): unsigned
            +virtual setInitialState(unsigned state): void
            +virtual spaceDimension(): PPL::dimension_type
            #virtual observableAsBdd(const Observable& observable): bdd
            --friends--
            friend class PolyhedralSynchronousProductAutomaton
        }
        abstract Automaton {}

        PolyhedralAbstraction --|> Automaton

        package general {
            class ObservablePatch {
                --data members--
                -m_observable: Observable
                -m_patch: const Poly&
                -m_hashcode: std::size_t
                --constructors--
                +ObservablePatch(const Observable& observable, const Poly& patch)
                +ObservablePatch(const ObservablePatch& other)
                +ObservablePatch(ObservablePatch&& other)
                --member functions--
                +observable(): Observable
                +observableInterpretation(): PowersetConstSharedPtr
                +patch(): const Poly&
                +spaceDimension(): PPL::dimension_type
                +hashcode(): std::size_t
                --operators--
                +operator!= (const ObservablePatch& patchObservable1, const ObservablePatch& patchObservable2) : bool
                +operator== (const ObservablePatch& patchObservable1, const ObservablePatch& patchObservable2) : bool
            }

            ObservablePatch --> "1" Observable

            class ObservablePatchSequence {
                --data members--
                -m_sequence: std::vector<ObservablePatch>
                -m_hashcode: std::size_t
                -m_spaceDimension: PPL::dimension_type
                --constructors--
                +ObservablePatchSequence(const std::vector<ObservablePatch>& sequence, PPL::dimension_type spaceDimension)
                +ObservablePatchSequence(std::vector<ObservablePatch>&& sequence, const PPL::dimension_type spaceDimension)
                +ObservablePatchSequence(const ObservablePatchSequence& other)
                +ObservablePatchSequence(ObservablePatchSequence&& other)
                --member functions--
                +sequence(): const std::vector<ObservablePatch>&
                +cbegin(): std::vector<ObservablePatch>::const_iterator
                +cend(): std::vector<ObservablePatch>::const_iterator
                +isEmpty(): bool
                +totalPatches(): int
                +firstObservable(): std::optional<const Observable* const>
                +firstObservablePatch(): std::optional<const ObservablePatch* const>
                +spaceDimension(): PPL::dimension_type
                +hashcode(): std::size_t
                -computeHashCode(): void
                --operators--
                +operator!= (const ObservablePatchSequence& seq1, const ObservablePatchSequence& seq2) : bool
                +operator== (const ObservablePatchSequence& seq1, const ObservablePatchSequence& seq2) : bool
            }

            struct "std::hash<ObservablePatchSequence>" as ObservablePatchSequenceHash {
                +std::size_t operator() (const ObservablePatchSequence& observablePatchSequence) const noexcept
            }

            struct "std::hash<ObservablePatch>" as ObservablePatchHash {
                +std::size_t operator() (const ObservablePatch& observablePatch) const noexcept
            }

            ObservablePatchSequence <..> ObservablePatchHash
            ObservablePatch <..> ObservablePatchSequenceHash
            Observable <..> ObservableHash

            class ObservableTraverseNode {
                --data members--
                -m_travPoints: PowersetSharedPtr
                -m_observable: Observable
                -m_isSing: bool
                --constructors--
                +ObservableTraverseNode(const ObservablePatchSequence& sequence, const Poly& preFlow, bool isSing = false)
                +ObservableTraverseNode() = default
                --member functions--
                +travPoints(): PowersetConstSharedPtr
                +observable(): const Observable&
                +spaceDimension(): PPL::dimension_type
                +isSingular(): bool
                +isEmpty(): bool
                +isUniverse(): bool
                -computeObservable(const ObservablePatchSequence& sequence): void
                -computeTravPoints(const ObservablePatchSequence& sequence, const Poly& preFlow): void
            }

            ObservablePatchSequence --> "1...*" ObservablePatch
            ObservableTraverseNode --> "1" Observable
            ObservableTraverseNode ..> ObservablePatchSequence

            class GeneralPolyhedralAbstraction {
                --type aliases--
                using GeneralPolyhedralAbstractionConstSharedPtr = std::shared_ptr<GeneralPolyhedralAbstraction>
                --data members--
                -m_nodeByState: std::unordered_map<unsigned, ObservableTraverseNode>
                --constructors--
                +GeneralPolyhedralAbstraction(PolyhedralSystemConstSharedPtr polyhedralSystem, std::string_view name = "GeneralPolyhedralAbstraction")
                +GeneralPolyhedralAbstraction(PolyhedralSystemConstSharedPtr polyhedralSystem, std::vector<Observable>&& observables, int maxObservablePatchSequenceLength, std::string_view name = "GeneralPolyhedralAbstraction")
                --member function--
                -buildAbstraction(int maxObservablePatchSequenceLength, std::vector<Observable>&& observables): void
                -createStates(const ObservableTraverseNode& singTravNode, const ObservableTraverseNode& openTravNode): SingOpenStatePair
                -createEdges(SingOpenStatePair singOpenStatePair, const SingOpenStatePair& adjSingOpenStatePair): void
                -advanceByOne(const ObservablePatchSequence& observablePatchSequence): ObservablePatchSequence
            }

            class SingOpenStatePair {
                --data members--
                -m_singState: std::optional<unsigned>
                -m_openState: std::optional<unsigned>
                --constructors--
                +SingOpenStatePair(unsigned state, bool isSing)
                +SingOpenStatePair(unsigned singState, unsigned openState)
                +SingOpenStatePair() = default
                --member functions--
                +containsSingState(): bool
                +containsOpenState(): bool
                +singState(): unsigned
                +openState(): unsigned
            }

            GeneralPolyhedralAbstraction ..> ObservablePatchSequence
            GeneralPolyhedralAbstraction --> "*" ObservableTraverseNode
            GeneralPolyhedralAbstraction ..> SingOpenStatePair
            GeneralPolyhedralAbstraction --|> PolyhedralAbstraction
    }


    package omnidirectional {
        class Tile {
            --data members--
            -m_observable: Observable
            -m_powerset: PowersetConstSharedPtr
            -m_closure: PowersetConstSharedPtr
            -m_hashcode: std::size_t
            --constructors--
            +Tile(const Tile& other)
            +Tile(Tile&& other)
            +Tile(Observable observable, PowersetConstSharedPtr patches)
            +Tile(Observable observable, const Powerset& patches)
            --member functions--
            +observable(): const Observable&
            +powerset(): PowersetConstSharedPtr
            +closure(): PowersetConstSharedPtr
            +spaceDimension(): PPL::dimension_type
            +hashcode(): std::size_t
            -computeClosurePatches(): void
            -computeHashCode(): void
            --operators--
            +operator!= (const Tile& tile1, const Tile& tile2): bool
            +operator== (const Tile& tile1, const Tile& tile2): bool
            +operator<< (std::ostream& os, const Tile& tile): std::ostream&
        }

        package tilextractor {
            abstract TileExtractor {
                --destructors--
                virtual ~TileExtractor() = default
                --member functions--
                +virtual std::vector<Tile> extractTiles(const std::vector<Observable>& observables)
                +virtual std::vector<Tile> extractTiles(const Observable& observable) = 0
            }

            class TileExtractorDoublyLinkedList {
                --data members--
                 #m_powersetLinkedList: PowersetLinkedList
                --constructors--
                 +TileExtractorDoublyLinkedList()
                --member functions--
                #buildPowersetLinkedList(const Observable& observable)
                --static functions--
                {static}-bool merge(const PowersetLinkedList::NodePtr& i, const PowersetLinkedList::NodePtr& j)
            }

            struct PowersetLinkedList {
                --type aliases--
                using NodePtr = std::shared_ptr<Node>
                --data members--
                #head: NodePtr
            }

            struct Node {
                --data members--
                -powerset: PowersetSharedPtr
                -next: NodePtr
                -prev: NodePtr
            }

            TileExtractorDoublyLinkedList --|> TileExtractor
            TileExtractorDoublyLinkedList +--> PowersetLinkedList
            PowersetLinkedList --> "*" Node
        }

        class TileNode {
            --data members--
            -m_tile: Tile
            --constructors--
            +TileNode(const Tile& tile)
            +TileNode(const TileNode& other)
            +TileNode(TileNode&& other)
            --member functions--
            +observable(): const Observable&
            +points(): PowersetConstSharedPtr
            +isUniverse(): bool
            +spaceDimension(): PPL::dimension_type
            +isEmpty(): bool
            --operators--
            +operator!= (const TileNode& tileNode1, const TileNode& tileNode2) : bool
            +operator== (const TileNode& tileNode1, const TileNode& tileNode2) : bool
        }

        class TripleTileNode {
            --data members--
            -m_triple: std::tuple<Tile, Tile, Tile>
            -m_observable: Observable
            -m_points: PowersetConstSharedPtr
            --constructors--
            +TripleTileNode(const Tile& tile1, const Tile& tile2, const Tile& tile3)
            +TripleTileNode(const TileNode&)
            +TripleTileNode(TileNode&&)
            --member functions--
            +observable(): const Observable&
            +points(): PowersetConstSharedPtr
            +isUniverse(): bool
            +isEmpty(): bool
            +spaceDimension(): PPL::dimension_type
            -computeObservable(): void
            -computePoints(): void
            --operators--
            +operator!= (const TripleTileNode& tripleTileNode1, const TripleTileNode& tripleTileNode2) : bool
            +operator== (const TripleTileNode& tripleTileNode1, const TripleTileNode& tripleTileNode2) : bool
        }

        struct "std::hash<Tile>" as TileHash {
            +std::size_t operator() (const Tile& tile) const noexcept
        }

        class OmnidirectionalPolyhedralAbstraction {
            --type aliases--
            using OmnidirectionalPolyhedralAbstractionConstSharedPtr = std::shared_ptr<OmnidirectionalPolyhedralAbstraction>;
            --data members--
            -m_tileNodes: std::unordered_map<unsigned, std::variant<TileNode, TripleTileNode>>
            --constructors--
            +OmnidirectionalPolyhedralAbstraction(PolyhedralSystemConstSharedPtr polyhedralSystem, std::string_view name)
            --member functions--
            -buildAbstraction(std::vector<Tile>&& tiles): void
            -processTriple(const Tile& tile1, const Tile& tile2, const Tile& tile3, std::unordered_map<Tile, unsigned>& stateByTile): void
            -getStateByTileOrCreate(const Tile& tile, std::unordered_map<Tile, unsigned>& stateByTile): unsigned
            -extractTilesFromPolyhedralSystem(PolyhedralSystemConstSharedPtr polyhedralSystem): std::vector<Tile>
        }

        Tile <..> TileHash
        Tile --> "1" Observable
        TileNode --> "1" Observable
        TileNode --> "1" Tile
        TripleTileNode --> "3" Observable
        TripleTileNode --> "3" Tile
        TileExtractor ..> Tile
        TileExtractor --> "0..1" Observable
        OmnidirectionalPolyhedralAbstraction --> "*" TileNode
        OmnidirectionalPolyhedralAbstraction --> "*" TripleTileNode
        OmnidirectionalPolyhedralAbstraction --|> PolyhedralAbstraction
    }
}
@enduml
