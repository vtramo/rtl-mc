@startuml

package abstractions {
    class Observable {
        --data members--
        -m_atoms: std::shared_ptr<const spot::atomic_prop_set>
        -m_interpretation: PowersetConstSharedPtr
        -m_interpretationToString: std::optional<std::string>
        -m_hashcode: std::size_t
        --constructors--
        +Observable(spot::atomic_prop_set atoms, const Powerset& interpretation)
        +Observable(spot::atomic_prop_set atoms, PowersetSharedPtr interpretation)
        +Observable(spot::atomic_prop_set atoms, const Powerset& interpretation, std::string interpretationToString)
        +Observable(spot::atomic_prop_set atoms, PowersetSharedPtr interpretation, std::string interpretationToString)
        +Observable(const Observable& other)
        +Observable(Observable&& other)
        +Observable() = default
        --member function--
        +atoms(): const spot::atomic_prop_set&
        +interpretation(): PowersetConstSharedPtr
        +isUniverse(): bool
        +isEmpty(): bool
        +totalAtoms(): int
        +totalPatches(): int
        +hashcode(): std::size_t
        --operators--
        +operator!= (const Observable& observable1, const Observable& observable2) : bool
        +operator== (const Observable& observable1, const Observable& observable2) : bool
        +operator<< (std::ostream& os, const Observable& observable) : std::ostream&
    }

    struct "std::hash<Observable>" as ObservableHash {
        +std::size_t operator() (const Observable& observable) const noexcept
    }

    package finite {
        package general {
                class ObservablePatch {
                    --data members--
                    -m_observable: Observable
                    -m_patch: const Poly&
                    -m_hashcode: std::size_t
                    --constructors--
                    +ObservablePatch(Observable observable, const Poly& patch)
                    +ObservablePatch(const ObservablePatch& other)
                    +ObservablePatch(ObservablePatch&& other)
                    --member functions--
                    +observable(): Observable
                    +patch(): const Poly&
                    +hashcode(): std::size_t
                    --operators--
                    +operator!= (const ObservablePatch& patchObservable1, const ObservablePatch& patchObservable2) : bool
                    +operator== (const ObservablePatch& patchObservable1, const ObservablePatch& patchObservable2) : bool
                }

                ObservablePatch --> "1" Observable

                class ObservablePatchSequence {
                    --data members--
                    -m_sequence: std::vector<ObservablePatch>
                    -m_hashcode: std::size_t
                    --constructors--
                    +ObservablePatchSequence(std::vector<ObservablePatch> sequence)
                    +ObservablePatchSequence(const ObservablePatchSequence& other)
                    +ObservablePatchSequence(ObservablePatchSequence&& other)
                    --member functions--
                    +sequence(): const std::vector<ObservablePatch>&
                    +cbegin(): std::vector<ObservablePatch>::const_iterator
                    +cend(): std::vector<ObservablePatch>::const_iterator
                    +isEmpty(): bool
                    +totalPatches(): int
                    +firstObservablePatch(): std::optional<const ObservablePatch&>
                    +hashcode(): std::size_t
                    --operators--
                    +operator!= (const ObservablePatchSequence& seq1, const ObservablePatchSequence& seq2) : bool
                    +operator== (const ObservablePatchSequence& seq1, const ObservablePatchSequence& seq2) : bool
                }

                struct "std::hash<ObservablePatchSequence>" as ObservablePatchSequenceHash {
                    +std::size_t operator() (const ObservablePatchSequence& observablePatchSequence) const noexcept
                }

                struct "std::hash<ObservablePatch>" as ObservablePatchHash {
                    +std::size_t operator() (const ObservablePatch& observablePatch) const noexcept
                }

                ObservablePatchSequence <..> ObservablePatchHash
                ObservablePatch <..> ObservablePatchSequenceHash
                Observable <..> ObservableHash

                class ObservableTraversalNode {
                    --data members--
                    -m_travPoints: PowersetSharedPtr
                    -m_observable: Observable
                    -m_isSing: bool
                    --constructors--
                    +ObservableTraversalNode(ObservablePatchSequence sequence, const Poly& preFlow, bool isSing = false)
                    --member functions--
                    +travPoints(): PowersetConstSharedPtr
                    +observable(): Observable
                    +isSing(): bool
                    +isEmpty(): bool
                    +isUniverse(): bool
                }

                ObservablePatchSequence --> "1...*" ObservablePatch
                ObservableTraversalNode --> "1" Observable
                ObservableTraversalNode ..> ObservablePatchSequence

                class GeneralFinitePolyhedralAbstraction {
                    --data members--
                    -m_graph: spot::twa_graph_ptr
                    -m_sufficientHorizon: int
                    -m_totalTrees: int
                    -m_nodeByState: std::unordered_map<int, ObservableTraversalNode>
                    --constructors--
                    +GeneralFinitePolyhedralAbstraction(PolyhedralSystemConstSharedPtr polyhedralSystem, int totalStatesFiniteAutomaton)
                    --member function--
                    +points(int state): PowersetConstSharedPtr
                    +observable(int state): const Observable&
                    +sufficientHorizon(): int
                    +totalTrees(): int
                }

                class SingOpenStatePair {
                    --data members--
                    -m_singState: std::optional<int>
                    -m_openState: std::optional<int>
                    --constructors--
                    +SingOpenStatePair(int state, bool isSing)
                    +SingOpenStatePair(int singState, int openState)
                    --member functions--
                    +containsSingState(): bool
                    +containsOpenState(): bool
                    +singState(): int
                    +openState(): int
                }

                GeneralFinitePolyhedralAbstraction --> "*" ObservablePatchSequence
                GeneralFinitePolyhedralAbstraction --> "*" ObservableTraversalNode
                GeneralFinitePolyhedralAbstraction ..> SingOpenStatePair
        }
    }

    package omnidirectional {
        class Tile {
            --data members--
            -m_observable: Observable
            -m_powerset: PowersetConstSharedPtr
            -m_closure: PowersetConstSharedPtr
            -m_hashcode: std::size_t
            --constructors--
            +Tile(const Tile& other)
            +Tile(Tile&& other)
            +Tile(Observable observable, PowersetSharedPtr patches)
            +Tile(Observable observable, const Powerset& patches)
            --member functions--
            +observable(): const Observable&
            +powerset(): PowersetConstSharedPtr
            +closure(): PowersetConstSharedPtr
            +hashcode(): std::size_t
            -computeClosurePatches(): void
            -computeHashCode(): void
            --operators--
            +operator!= (const Tile& tile1, const Tile& tile2): bool
            +operator== (const Tile& tile1, const Tile& tile2): bool
            +operator<< (std::ostream& os, const Tile& tile): std::ostream&
        }

        class TileExtractor {
             --data members--
             -m_currentObservable: const Observable*
             -m_patchesIndexesInFirstTile: std::unordered_set<int>
             --constructors--
             +TileExtractor()
             --member functions--
             +extractTiles(const std::vector<Observable>& observables): std::vector<Tile>
             +extractTiles(const Observable& observable): std::vector<Tile>
             -findFirstTile(): Tile
             -collectPatchesNotInFirstTile(): std::list<std::reference_wrapper<const Poly>>
             -findRemainingTiles(): std::vector<Tile>
             --static functions--
             {static} -border(const Poly& p, const Poly& q): PowersetUniquePtr
             {static} -areAdjacent(const Poly& p, const Poly& q): bool
        }

        class TileNode {
            --data members--
            -m_tile: Tile
            --constructors--
            +TileNode(const Tile& tile)
            +TileNode(const TileNode& other)
            +TileNode(TileNode&& other)
            --member functions--
            +observable(): const Observable&
            +points(): PowersetConstSharedPtr
            +isUniverse(): bool
            +isEmpty(): bool
            --operators--
            +operator!= (const TileNode& tileNode1, const TileNode& tileNode2) : bool
            +operator== (const TileNode& tileNode1, const TileNode& tileNode2) : bool
        }

        class TripleTileNode {
            --data members--
            -m_triple: std::tuple<Tile, Tile, Tile>
            -m_observable: Observable
            -m_points: PowersetConstSharedPtr
            --constructors--
            +TripleTileNode(const Tile& tile1, const Tile& tile2, const Tile& tile3)
            +TripleTileNode(const TileNode&)
            +TripleTileNode(TileNode&&)
            --member functions--
            +observable(): const Observable&
            +points(): PowersetConstSharedPtr
            +isUniverse(): bool
            +isEmpty(): bool
            -computeObservable(): void
            -computePoints(): void
            --operators--
            +operator!= (const TripleTileNode& tripleTileNode1, const TripleTileNode& tripleTileNode2) : bool
            +operator== (const TripleTileNode& tripleTileNode1, const TripleTileNode& tripleTileNode2) : bool
        }

        struct "std::hash<Tile>" as TileHash {
            +std::size_t operator() (const Tile& tile) const noexcept
        }

        class OmnidirectionalPolyhedralAbstraction {
            --data members--
            -m_graph: spot::twa_graph_ptr
            -m_tileNodes: std::unordered_map<int, std::variant<TileNode, TripleTileNode>>
            --constructors--
            +OmnidirectionalPolyhedralAbstraction(PolyhedralSystemConstSharedPtr polyhedralSystem)
            --data members--
            +observable(int state): const Observable&
            +points(int state): PowersetConstSharedPtr
        }

        Tile <..> TileHash
        Tile --> "1" Observable
        TileNode --> "1" Observable
        TileNode --> "1" Tile
        TripleTileNode --> "3" Observable
        TripleTileNode --> "3" Tile
        TileExtractor ..> Tile
        TileExtractor --> "0..1" Observable
    }
}
@enduml
